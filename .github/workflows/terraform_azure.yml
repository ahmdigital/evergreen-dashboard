name: Terraform azure
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run
on:
  workflow_dispatch:
    inputs:
      require_authentication:
        description: 'Whether Github authentication is required to access the dashboard'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      target_organisation:
        description: 'The name of the Github organisation that is tracked'
        required: true
        default: 'ahm-monash'
        type: text
  workflow_run:
    branches: [main]
    workflows: [Docker]
    types: [completed]

# Because we are using workflow_run
# github.event_name will be workflow_run instead of push

jobs:
  terraform_azure_docker:
    name: terraform azure docker
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform_azure/
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          # terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch'
        # instead of forced replacement, it should be triggered in main.tf
        run: terraform apply -replace=azurerm_linux_web_app.this -auto-approve

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
        # instead of forced replacement, it should be triggered in main.tf
        run: terraform apply -replace=azurerm_linux_web_app.this -auto-approve -var="require_authentication=${{ inputs.require_authentication }}" -var="target_organisation=${{ inputs.target_organisation }}"
